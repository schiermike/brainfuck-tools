// https://www.spoj.pl/problems/SBSTR1/
// Schier Michael

// m[0] = 0 (CONSTANT)
// we set some huge bunch (up to 100 positions) of memory 
// before that point to 1 so that we can reset the pointer any time we like
+>+>+>+>+>+>+>+>+>+>+>+>+>+>+>+>+>+>+>+>
+>+>+>+>+>+>+>+>+>+>+>+>+>+>+>+>+>+>+>+>
+>+>+>+>+>+>+>+>+>+>+>+>+>+>+>+>+>+>+>+>
+>+>+>+>+>+>+>+>+>+>+>+>+>+>+>+>+>+>+>+>
+>+>+>+>+>+>+>+>+>+>+>+>+>+>+>+>+>+>+>+>

// m[-1] = 24 (number of input examples) MAIN LOOP
<+++++++++++++++++++++++
[>

>>>>>>   // m1 to m5 are the counters
// read first string (m6 to m15)
,------------------------------------------------>
,------------------------------------------------>
,------------------------------------------------>
,------------------------------------------------>
,------------------------------------------------>
,------------------------------------------------>
,------------------------------------------------>
,------------------------------------------------>
,------------------------------------------------>
,------------------------------------------------>
,   // skip space
// read second string (m16 to m20)
,------------------------------------------------>
,------------------------------------------------>
,------------------------------------------------>
,------------------------------------------------>
,------------------------------------------------>
,>  // read newline (on WIN hosts, don't forget the \r)

<<<<<<<<<<<<<<<<<<<<<<<<<[>] // pointer reset

// CHECK1: abcde =?= vwxyz
>>>>>>[<<<<<+<] // m1 += m6
<<<<<<<<<<<<<<<<<<<<<<<<<[>] // pointer reset
>>>>>>>[<<<<<+[<]] // m2 += m7
<<<<<<<<<<<<<<<<<<<<<<<<<[>] // pointer reset
>>>>>>>>[<<<<<+[<]] // m3 += m8
<<<<<<<<<<<<<<<<<<<<<<<<<[>] // pointer reset
>>>>>>>>>[<<<<<+[<]] // m4 += m9
<<<<<<<<<<<<<<<<<<<<<<<<<[>] // pointer reset
>>>>>>>>>>[<<<<<+[<]] // m5 += m10
<<<<<<<<<<<<<<<<<<<<<<<<<[>] // pointer reset
>>>>>>>>>>>>>>>>[<<<<<<<<<<<<<<<-[<]] // m1 -= m16
<<<<<<<<<<<<<<<<<<<<<<<<<[>] // pointer reset
>>>>>>>>>>>>>>>>>[<<<<<<<<<<<<<<<-[<]] // m2 -= m17
<<<<<<<<<<<<<<<<<<<<<<<<<[>] // pointer reset
>>>>>>>>>>>>>>>>>>[<<<<<<<<<<<<<<<-[<]] // m3 -= m18
<<<<<<<<<<<<<<<<<<<<<<<<<[>] // pointer reset
>>>>>>>>>>>>>>>>>>>[<<<<<<<<<<<<<<<-[<]] // m4 -= m19
<<<<<<<<<<<<<<<<<<<<<<<<<[>] // pointer reset
>>>>>>>>>>>>>>>>>>>>[<<<<<<<<<<<<<<<-[<]] // m5 -= m20
<<<<<<<<<<<<<<<<<<<<<<<<<[>] // pointer reset
// now check whether m1 to m5 are all 0 or whether one of them is either -1 or 1
>>[++[-]<++[<]] // if(m2 != 0) m1 += 2 and m2 = 0
<<<<<<<<<<<<<<<<<<<<<<<<<[>] // pointer reset
>>>[++[-]<<++[<]] // if(m3 != 0) m1 += 2 and m3 = 0
<<<<<<<<<<<<<<<<<<<<<<<<<[>] // pointer reset
>>>>[++[-]<<<++[<]] // if(m4 != 0) m1 += 2 and m4 = 0
<<<<<<<<<<<<<<<<<<<<<<<<<[>] // pointer reset
>>>>>[++[-]<<<<++[<]] // if(m5 != 0) m1 += 2 and m5 = 0
<<<<<<<<<<<<<<<<<<<<<<<<<[>] // pointer reset

// CHECK2: bcdef =?= vwxyz
>[++++++[-]< // i = 0
>>>>>>>[<<<<<<+<] // m1 += m7
<<<<<<<<<<<<<<<<<<<<<<<<<[>] // pointer reset
>>>>>>>>[<<<<<<+[<]] // m2 += m8
<<<<<<<<<<<<<<<<<<<<<<<<<[>] // pointer reset
>>>>>>>>>[<<<<<<+[<]] // m3 += m9
<<<<<<<<<<<<<<<<<<<<<<<<<[>] // pointer reset
>>>>>>>>>>[<<<<<<+[<]] // m4 += m10
<<<<<<<<<<<<<<<<<<<<<<<<<[>] // pointer reset
>>>>>>>>>>>[<<<<<<+[<]] // m5 += m11
<<<<<<<<<<<<<<<<<<<<<<<<<[>] // pointer reset
>>>>>>>>>>>>>>>>[<<<<<<<<<<<<<<<-[<]] // m1 -= m16
<<<<<<<<<<<<<<<<<<<<<<<<<[>] // pointer reset
>>>>>>>>>>>>>>>>>[<<<<<<<<<<<<<<<-[<]] // m2 -= m17
<<<<<<<<<<<<<<<<<<<<<<<<<[>] // pointer reset
>>>>>>>>>>>>>>>>>>[<<<<<<<<<<<<<<<-[<]] // m3 -= m18
<<<<<<<<<<<<<<<<<<<<<<<<<[>] // pointer reset
>>>>>>>>>>>>>>>>>>>[<<<<<<<<<<<<<<<-[<]] // m4 -= m19
<<<<<<<<<<<<<<<<<<<<<<<<<[>] // pointer reset
>>>>>>>>>>>>>>>>>>>>[<<<<<<<<<<<<<<<-[<]] // m5 -= m20
<<<<<<<<<<<<<<<<<<<<<<<<<[>] // pointer reset
// now check whether m1 to m5 are all 0 or whether one of them is either -1 or 1
>>[++[-]<++[<]] // if(m2 != 0) m1 += 2 and m2 = 0
<<<<<<<<<<<<<<<<<<<<<<<<<[>] // pointer reset
>>>[++[-]<<++[<]] // if(m3 != 0) m1 += 2 and m3 = 0
<<<<<<<<<<<<<<<<<<<<<<<<<[>] // pointer reset
>>>>[++[-]<<<++[<]] // if(m4 != 0) m1 += 2 and m4 = 0
<<<<<<<<<<<<<<<<<<<<<<<<<[>] // pointer reset
>>>>>[++[-]<<<<++[<]] // if(m5 != 0) m1 += 2 and m5 = 0
<<<<<<<<<<<<<<<<<<<<<<<<<[>] // pointer reset


// CHECK3: cdefg =?= vwxyz
>[++++++[-]< // i = 0
>>>>>>>>[<<<<<<<+<] // m1 += m8
<<<<<<<<<<<<<<<<<<<<<<<<<[>] // pointer reset
>>>>>>>>>[<<<<<<<+[<]] // m2 += m9
<<<<<<<<<<<<<<<<<<<<<<<<<[>] // pointer reset
>>>>>>>>>>[<<<<<<<+[<]] // m3 += m10
<<<<<<<<<<<<<<<<<<<<<<<<<[>] // pointer reset
>>>>>>>>>>>[<<<<<<<+[<]] // m4 += m11
<<<<<<<<<<<<<<<<<<<<<<<<<[>] // pointer reset
>>>>>>>>>>>>[<<<<<<<+[<]] // m5 += m12
<<<<<<<<<<<<<<<<<<<<<<<<<[>] // pointer reset
>>>>>>>>>>>>>>>>[<<<<<<<<<<<<<<<-[<]] // m1 -= m16
<<<<<<<<<<<<<<<<<<<<<<<<<[>] // pointer reset
>>>>>>>>>>>>>>>>>[<<<<<<<<<<<<<<<-[<]] // m2 -= m17
<<<<<<<<<<<<<<<<<<<<<<<<<[>] // pointer reset
>>>>>>>>>>>>>>>>>>[<<<<<<<<<<<<<<<-[<]] // m3 -= m18
<<<<<<<<<<<<<<<<<<<<<<<<<[>] // pointer reset
>>>>>>>>>>>>>>>>>>>[<<<<<<<<<<<<<<<-[<]] // m4 -= m19
<<<<<<<<<<<<<<<<<<<<<<<<<[>] // pointer reset
>>>>>>>>>>>>>>>>>>>>[<<<<<<<<<<<<<<<-[<]] // m5 -= m20
<<<<<<<<<<<<<<<<<<<<<<<<<[>] // pointer reset
// now check whether m1 to m5 are all 0 or whether one of them is either -1 or 1
>>[++[-]<++[<]] // if(m2 != 0) m1 += 2 and m2 = 0
<<<<<<<<<<<<<<<<<<<<<<<<<[>] // pointer reset
>>>[++[-]<<++[<]] // if(m3 != 0) m1 += 2 and m3 = 0
<<<<<<<<<<<<<<<<<<<<<<<<<[>] // pointer reset
>>>>[++[-]<<<++[<]] // if(m4 != 0) m1 += 2 and m4 = 0
<<<<<<<<<<<<<<<<<<<<<<<<<[>] // pointer reset
>>>>>[++[-]<<<<++[<]] // if(m5 != 0) m1 += 2 and m5 = 0
<<<<<<<<<<<<<<<<<<<<<<<<<[>] // pointer reset

// CHECK4: defgh =?= vwxyz
>[++++++[-]< // i = 0
>>>>>>>>>[<<<<<<<<+<] // m1 += m9
<<<<<<<<<<<<<<<<<<<<<<<<<[>] // pointer reset
>>>>>>>>>>[<<<<<<<<+[<]] // m2 += m10
<<<<<<<<<<<<<<<<<<<<<<<<<[>] // pointer reset
>>>>>>>>>>>[<<<<<<<<+[<]] // m3 += m11
<<<<<<<<<<<<<<<<<<<<<<<<<[>] // pointer reset
>>>>>>>>>>>>[<<<<<<<<+[<]] // m4 += m12
<<<<<<<<<<<<<<<<<<<<<<<<<[>] // pointer reset
>>>>>>>>>>>>>[<<<<<<<<+[<]] // m5 += m13
<<<<<<<<<<<<<<<<<<<<<<<<<[>] // pointer reset
>>>>>>>>>>>>>>>>[<<<<<<<<<<<<<<<-[<]] // m1 -= m16
<<<<<<<<<<<<<<<<<<<<<<<<<[>] // pointer reset
>>>>>>>>>>>>>>>>>[<<<<<<<<<<<<<<<-[<]] // m2 -= m17
<<<<<<<<<<<<<<<<<<<<<<<<<[>] // pointer reset
>>>>>>>>>>>>>>>>>>[<<<<<<<<<<<<<<<-[<]] // m3 -= m18
<<<<<<<<<<<<<<<<<<<<<<<<<[>] // pointer reset
>>>>>>>>>>>>>>>>>>>[<<<<<<<<<<<<<<<-[<]] // m4 -= m19
<<<<<<<<<<<<<<<<<<<<<<<<<[>] // pointer reset
>>>>>>>>>>>>>>>>>>>>[<<<<<<<<<<<<<<<-[<]] // m5 -= m20
<<<<<<<<<<<<<<<<<<<<<<<<<[>] // pointer reset
// now check whether m1 to m5 are all 0 or whether one of them is either -1 or 1
>>[++[-]<++[<]] // if(m2 != 0) m1 += 2 and m2 = 0
<<<<<<<<<<<<<<<<<<<<<<<<<[>] // pointer reset
>>>[++[-]<<++[<]] // if(m3 != 0) m1 += 2 and m3 = 0
<<<<<<<<<<<<<<<<<<<<<<<<<[>] // pointer reset
>>>>[++[-]<<<++[<]] // if(m4 != 0) m1 += 2 and m4 = 0
<<<<<<<<<<<<<<<<<<<<<<<<<[>] // pointer reset
>>>>>[++[-]<<<<++[<]] // if(m5 != 0) m1 += 2 and m5 = 0
<<<<<<<<<<<<<<<<<<<<<<<<<[>] // pointer reset

// CHECK5: efghi =?= vwxyz
>[++++++[-]< // i = 0
>>>>>>>>>>[<<<<<<<<<+<] // m1 += m10
<<<<<<<<<<<<<<<<<<<<<<<<<[>] // pointer reset
>>>>>>>>>>>[<<<<<<<<<+[<]] // m2 += m11
<<<<<<<<<<<<<<<<<<<<<<<<<[>] // pointer reset
>>>>>>>>>>>>[<<<<<<<<<+[<]] // m3 += m12
<<<<<<<<<<<<<<<<<<<<<<<<<[>] // pointer reset
>>>>>>>>>>>>>[<<<<<<<<<+[<]] // m4 += m13
<<<<<<<<<<<<<<<<<<<<<<<<<[>] // pointer reset
>>>>>>>>>>>>>>[<<<<<<<<<+[<]] // m5 += m14
<<<<<<<<<<<<<<<<<<<<<<<<<[>] // pointer reset
>>>>>>>>>>>>>>>>[<<<<<<<<<<<<<<<-[<]] // m1 -= m16
<<<<<<<<<<<<<<<<<<<<<<<<<[>] // pointer reset
>>>>>>>>>>>>>>>>>[<<<<<<<<<<<<<<<-[<]] // m2 -= m17
<<<<<<<<<<<<<<<<<<<<<<<<<[>] // pointer reset
>>>>>>>>>>>>>>>>>>[<<<<<<<<<<<<<<<-[<]] // m3 -= m18
<<<<<<<<<<<<<<<<<<<<<<<<<[>] // pointer reset
>>>>>>>>>>>>>>>>>>>[<<<<<<<<<<<<<<<-[<]] // m4 -= m19
<<<<<<<<<<<<<<<<<<<<<<<<<[>] // pointer reset
>>>>>>>>>>>>>>>>>>>>[<<<<<<<<<<<<<<<-[<]] // m5 -= m20
<<<<<<<<<<<<<<<<<<<<<<<<<[>] // pointer reset
// now check whether m1 to m5 are all 0 or whether one of them is either -1 or 1
>>[++[-]<++[<]] // if(m2 != 0) m1 += 2 and m2 = 0
<<<<<<<<<<<<<<<<<<<<<<<<<[>] // pointer reset
>>>[++[-]<<++[<]] // if(m3 != 0) m1 += 2 and m3 = 0
<<<<<<<<<<<<<<<<<<<<<<<<<[>] // pointer reset
>>>>[++[-]<<<++[<]] // if(m4 != 0) m1 += 2 and m4 = 0
<<<<<<<<<<<<<<<<<<<<<<<<<[>] // pointer reset
>>>>>[++[-]<<<<++[<]] // if(m5 != 0) m1 += 2 and m5 = 0
<<<<<<<<<<<<<<<<<<<<<<<<<[>] // pointer reset

// CHECK6: fghij =?= vwxyz
>[++++++[-]< // i = 0
>>>>>>>>>>>[<<<<<<<<<<+<] // m1 += m11
<<<<<<<<<<<<<<<<<<<<<<<<<[>] // pointer reset
>>>>>>>>>>>>[<<<<<<<<<<+[<]] // m2 += m12
<<<<<<<<<<<<<<<<<<<<<<<<<[>] // pointer reset
>>>>>>>>>>>>>[<<<<<<<<<<+[<]] // m3 += m13
<<<<<<<<<<<<<<<<<<<<<<<<<[>] // pointer reset
>>>>>>>>>>>>>>[<<<<<<<<<<+[<]] // m4 += m14
<<<<<<<<<<<<<<<<<<<<<<<<<[>] // pointer reset
>>>>>>>>>>>>>>>[<<<<<<<<<<+[<]] // m5 += m15
<<<<<<<<<<<<<<<<<<<<<<<<<[>] // pointer reset
>>>>>>>>>>>>>>>>[<<<<<<<<<<<<<<<-[<]] // m1 -= m16
<<<<<<<<<<<<<<<<<<<<<<<<<[>] // pointer reset
>>>>>>>>>>>>>>>>>[<<<<<<<<<<<<<<<-[<]] // m2 -= m17
<<<<<<<<<<<<<<<<<<<<<<<<<[>] // pointer reset
>>>>>>>>>>>>>>>>>>[<<<<<<<<<<<<<<<-[<]] // m3 -= m18
<<<<<<<<<<<<<<<<<<<<<<<<<[>] // pointer reset
>>>>>>>>>>>>>>>>>>>[<<<<<<<<<<<<<<<-[<]] // m4 -= m19
<<<<<<<<<<<<<<<<<<<<<<<<<[>] // pointer reset
>>>>>>>>>>>>>>>>>>>>[<<<<<<<<<<<<<<<-[<]] // m5 -= m20
<<<<<<<<<<<<<<<<<<<<<<<<<[>] // pointer reset
// now check whether m1 to m5 are all 0 or whether one of them is either -1 or 1
>>[++[-]<++[<]] // if(m2 != 0) m1 += 2 and m2 = 0
<<<<<<<<<<<<<<<<<<<<<<<<<[>] // pointer reset
>>>[++[-]<<++[<]] // if(m3 != 0) m1 += 2 and m3 = 0
<<<<<<<<<<<<<<<<<<<<<<<<<[>] // pointer reset
>>>>[++[-]<<<++[<]] // if(m4 != 0) m1 += 2 and m4 = 0
<<<<<<<<<<<<<<<<<<<<<<<<<[>] // pointer reset
>>>>>[++[-]<<<<++[<]] // if(m5 != 0) m1 += 2 and m5 = 0
<<<<<<<<<<<<<<<<<<<<<<<<<[>] // pointer reset


] // end of CHECK6
] // end of CHECK5
] // end of CHECK4
] // end of CHECK3
] // end of CHECK2

<<<<<<<<<<<<<<<<<<<<<<<<<[>] // pointer reset
// if m1 still != 0 we did not find a match
>>+ // m2 = 1
<[++[-]++++++++++++++++++++++++++++++++++++++++++++++++.[-]>-<] // if(m1 != 0) {m1 = 0; output 0; m2 = 0}
>[++[-]+++++++++++++++++++++++++++++++++++++++++++++++++.[-]] // if(m2 != 0) { output 1; m2 = 0}
<++++++++++.[-] // print \n

// ensure that m1 to m5 is 0
<<<<<<<<<<<<<<<<<<<<<<<<<[>] // pointer reset
>>>>>[-]<[-]<[-]<[-]<[-]<


<-] // end of MAIN LOOP (m[-1])


